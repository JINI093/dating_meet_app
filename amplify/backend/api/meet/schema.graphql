# Dating App GraphQL Schema
# This schema uses API_KEY authentication for testing purposes
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } }

# User Points Model  
type UserPoints @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userId: String! @index(name: "byUserId")
  currentPoints: Int!
  totalEarned: Int!
  totalSpent: Int!
  lastUpdated: AWSDateTime!
  transactions: [PointTransaction] @hasMany(indexName: "byUserPoints", fields: ["id"])
}

# Point Transaction Model
type PointTransaction @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userPointsId: ID! @index(name: "byUserPoints")
  userId: String! @index(name: "byUserId")
  amount: Int!
  type: String!
  description: String!
  timestamp: AWSDateTime!
  userPoints: UserPoints @belongsTo(fields: ["userPointsId"])
}

# Point Package Model for Shop
type PointPackage @model @auth(rules: [{ allow: public }]) {
  id: ID!
  points: Int!
  bonusPoints: Int
  price: Int!
  discountPercent: Int
  isPopular: Boolean
  isLimited: Boolean
  sortOrder: Int!
  active: Boolean!
}

# Profiles Model for VIP functionality
type Profiles @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userId: String! @index(name: "byUserId")
  name: String!
  age: Int
  gender: String
  location: String
  profileImages: [String]
  bio: String
  occupation: String
  education: String
  height: Int
  bodyType: String
  smoking: String
  drinking: String
  religion: String
  mbti: String
  hobbies: [String]
  badges: [String]
  isVip: Boolean
  isPremium: Boolean
  isVerified: Boolean
  isOnline: Boolean
  likeCount: Int
  superChatCount: Int
  meetingType: String
  incomeCode: String
  lastSeen: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Superchat Model for premium messaging
type Superchat @model @auth(rules: [{ allow: public }]) {
  id: ID!
  fromUserId: String! @index(name: "byFromUserId")
  toProfilesId: String! @index(name: "byToProfilesId")
  message: String!
  pointsUsed: Int!
  templateType: String
  customData: String
  status: String!
  priority: Int!
  expiresAt: AWSDateTime!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Notice Model for Admin Panel
type Notice @model @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String!
  content: String!
  targetType: String! @index(name: "byTargetType")
  status: String! @index(name: "byStatus")
  authorId: String!
  authorName: String!
  viewCount: Int
  isPinned: Boolean
  isImportant: Boolean
  tags: [String]
  metadata: String
  publishedAt: AWSDateTime
  scheduledAt: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Report Model for Admin Panel
type Report @model @auth(rules: [{ allow: public }]) {
  id: ID!
  reporterUserId: String! @index(name: "byReporterUserId")
  reporterName: String!
  reportedUserId: String! @index(name: "byReportedUserId")
  reportedName: String!
  reportType: String! @index(name: "byReportType")
  reportReason: String!
  reportContent: String!
  evidence: [String]
  status: String! @index(name: "byStatus")
  priority: String!
  adminNotes: String
  processedBy: String
  processedAt: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Banner Model for Admin Panel
type Banner @model @auth(rules: [{ allow: public }]) {
  id: ID!
  type: String! @index(name: "byType")
  title: String!
  description: String
  imageUrl: String!
  linkUrl: String
  isActive: Boolean!
  order: Int!
  startDate: AWSDateTime
  endDate: AWSDateTime
  createdBy: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Payment Model for Admin Panel
type Payment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userId: String! @index(name: "byUserId")
  userName: String!
  productName: String!
  productType: String!
  amount: Int!
  paymentMethod: String!
  status: String! @index(name: "byStatus")
  transactionId: String
  gatewayResponse: String
  refundAmount: Int
  refundReason: String
  refundedAt: AWSDateTime
  failureReason: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Keep existing Todo model for backward compatibility
type Todo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  description: String
}
type GeneralProduct @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String
  subtitle: String
  description: String
  iconType: String
  iconColor: String
  isActive: Boolean
  price: Float
  category: String
}

